# -*- coding: utf-8 -*-
"""CS 5010 Final Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O-IGiyHCCuCqwhf2ctBLyCq5lyvgJQZF

CS5010 FINAL PROJECT

Group 8 | Allison Hansen (Aph7hy), Amanda Maruca (qfu2fy), Colin Warner (ynq9ya)

TOPIC | Refugee Resettlement/Asylum Seeking Data

FILE SET-UP
"""

# imports

import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt

!pip install geopandas
import geopandas 
from bokeh.io import output_notebook, show, output_file
from bokeh.plotting import figure
from bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar
from bokeh.palettes import brewer
import json

# mount google drive

from google.colab import drive
drive.mount('/content/drive')

# read in decisions data file 

file = '/content/drive/MyDrive/asylum-decisions.csv'
data = pd.read_csv(file)

df_decisions = pd.DataFrame(data)

# read in applications data file 

file = '/content/drive/MyDrive/asylum-applications.csv'
data = pd.read_csv(file)

df_applications = pd.DataFrame(data)

# read in demographics data file 

file = '/content/drive/MyDrive/demographics.csv'
data = pd.read_csv(file)

df_demographics = pd.DataFrame(data)

"""DATA PROCESSING & CLEANING"""

### ASYLUM DECISIONS DATA SET FROM UNHCR ###

#fill blank country of origin codes with unk to represent unknown
df_decisions = df_decisions.fillna("UNK")

#create unique id field concatenating year, and both country ISO's. To be used for joins later.
df_decisions['id'] = df_decisions['Year'].map(str) + "-" + df_decisions['Country of origin (ISO)'].map(str) + "-" + df_decisions['Country of asylum (ISO)'].map(str)

#group by id, year, country of origin, and country of asylum (plus their ISO's) in order to get sums of decision columns per unique country combination of origin-asylum 
df_decisions = df_decisions.groupby(['id','Year','Country of origin','Country of origin (ISO)', 'Country of asylum', 'Country of asylum (ISO)'])['Recognized decisions','Complementary protection', 'Rejected decisions', 'Otherwise closed', 'Total decisions'].sum()

#print this result to a csv file to be read back in later.
#note: this is the only way i found to 'trick' pandas into allowing me to join by the group by columns later. i use this trick throughout the file. 
df_decisions.to_csv(r'df_decisions.csv')

print("total rows in df_decisions:")
print(df_decisions.shape[0])

### ASYLUM APPLICATIONS DATA SET FROM UNHCR ###

#fill blank country of origin codes with unk to represent unknown
df_applications = df_applications.fillna("UNK")

# create unique id field concatenating year, and both country ISO's. To be used for joins later.
df_applications['id'] = df_applications['Year'].map(str) + "-" + df_applications['Country of origin (ISO)'].map(str) + "-" + df_applications['Country of asylum (ISO)'].map(str)

# group by id, year, country of origin, and country of asylum (plus their ISO's) in order to get sums of applications per unique country combination of origin-asylum 
df_applications = df_applications.groupby(['id','Year','Country of origin','Country of origin (ISO)', 'Country of asylum', 'Country of asylum (ISO)'])['applied'].sum()

# print this result to a csv file to be read back in later.
df_applications.to_csv(r'df_applications.csv')
print("total rows in df_applications:")
print(df_applications.shape[0])

# read back in the df_decisions csv from before in order to join with df_applications on id
df_decisions = pd.read_csv("df_decisions.csv")

# read back in the df_applications csv from before in order to join with df_decisions on id
df_applications = pd.read_csv("df_applications.csv")

# Inner join the decisions and applications files on previously created id field. 
# add suffix to commonly named fields in order to distinguish which file they are coming from. 
df_dec_app = df_applications.set_index('id').join(df_decisions.set_index('id'), lsuffix='_applications', rsuffix='_decisions', how='inner')

# print this result to a csv file to be read back in later.
df_dec_app.to_csv(r'df_dec_app.csv')

# read back in the df_dec_app csv from before in order to join with new df_demographics on id
df_dec_app = pd.read_csv("df_dec_app.csv")
print("total rows in df_dec_app:")
print(df_dec_app.shape[0])

### DEMOGRAPHIC DATA SET FROM UNHCR ###

#fill blank country of origin codes with unk to represent unknown
df_demographics = df_demographics.fillna("UNK")
# create unique id field concatenating year, and both country ISO's. To be used for joins later.
df_demographics['id'] = df_demographics['Year'].map(str) + "-" + df_demographics['Country of origin (ISO)'].map(str) + "-" + df_demographics['Country of asylum (ISO)'].map(str)
print("total rows in df_demographics:")
print(df_demographics.shape[0])

### ALL DATA SETS FROM UNHCR ###

# Inner join the df_dc_app and df_demographics files on previously created id field. 
df_joined = df_dec_app.set_index('id').join(df_demographics.set_index('id'), rsuffix="_demos", how="inner")

# print this result to a csv file. this is the complete aggregated file for our original UNHCR Data Source
df_joined.to_csv(r'df_joined.csv')
print("total rows in df_joined:")
print(df_joined.shape[0])

# read back in the joined data set. 
df_joined = pd.read_csv("df_joined.csv")

### GROUP BY COUNTRY OF ORIGIN, SORT BY TOTAL APPLICATIONS###

df_origin = df_joined.groupby(['Country of origin_applications','Country of origin (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
df_origin = df_origin.sort_values('applied', ascending=False)
df_origin["total_accepted"] = df_origin["Recognized decisions"] + df_origin["Complementary protection"]
df_origin["total_rejected"] = df_origin["Rejected decisions"] + df_origin["Otherwise closed"]
df_origin["ratio_accepted"] = (df_origin["total_accepted"] / df_origin["Total decisions"])
df_origin_top10 = df_origin.head(n = 10)
df_origin_top10.to_csv(r'df_origin.csv')

### GROUP BY COUNTRY OF ASYLUM, SORT BY TOTAL APPLICATIONS ###

df_asylum = df_joined.groupby(['Country of asylum_applications','Country of asylum (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
df_asylum = df_asylum.sort_values('applied', ascending=False)
df_asylum["total_accepted"] = df_asylum["Recognized decisions"] + df_asylum["Complementary protection"]
df_asylum["total_rejected"] = df_asylum["Rejected decisions"] + df_asylum["Otherwise closed"]
df_asylum["ratio_accepted"] = (df_asylum["total_accepted"] / df_asylum["Total decisions"])
df_asylum_top10 = df_asylum.head(n = 10)
df_asylum_top10.to_csv(r'df_asylum.csv')

### CREATE BASIC BAR PLOT OF 10 COUNTRIES WITH MOST ASYLUM SEEKERS SUBMITTING APPLICATIONS ###

matplotlib.rc_file_defaults()
ax1 = sns.set_style(style=None, rc=None )

fig, ax1 = plt.subplots(figsize=(12,6))

sns.lineplot(data = df_origin_top10, x='Country of origin (ISO)_applications', y = 'ratio_accepted' , marker='o', sort = False, ax=ax1)
ax2 = ax1.twinx()

sns.barplot(data = df_origin_top10, x='Country of origin (ISO)_applications', y='applied', alpha=0.5, ax=ax2)

### CREATE BASIC BAR PLOT OF TOP 10 COUNTRIES OF ASYLUM BY APPLICATIONS RECEIVED ###

matplotlib.rc_file_defaults()
ax1 = sns.set_style(style=None, rc=None )

fig, ax1 = plt.subplots(figsize=(12,6))

sns.lineplot(data = df_asylum_top10, x='Country of asylum (ISO)_applications', y = 'ratio_accepted' , marker='o', sort = False, ax=ax1)
ax2 = ax1.twinx()

sns.barplot(data = df_asylum_top10, x='Country of asylum (ISO)_applications', y='applied', alpha=0.5, ax=ax2)

"""PRODUCT & RESULTS




"""

# country of origin function: number of asylum destinations 

def numAsylumDest(country_df): 
  n = len(country_df['Country of asylum'].unique())
  return n

# country of origin function: percentage of world refugees 

def perWorldRef(country_df): 
  country_apps = country_df['applied'].sum()
  all_apps = df_origin['applied'].sum()
  p = country_apps / all_apps 
  return p*100

# country of origin function: top 5 countries of asylum 

def top5asylum(country_df):
  country_df.groupby(['Country of asylum_applications']).sum()  
  country_df_top = country_df.groupby(['Country of asylum_applications','Country of asylum (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
  country_df_top = country_df_top.sort_values('applied', ascending=False)
  country_df_top["total_accepted"] = country_df_top["Recognized decisions"] + country_df_top["Complementary protection"]
  country_df_top["total_rejected"] = country_df_top["Rejected decisions"] + country_df_top["Otherwise closed"]
  country_df_top["ratio_accepted"] = (country_df_top["total_accepted"] / country_df_top["Total decisions"])
  country_df_top5 = country_df_top.head(n = 5)
  country_df_top5.to_csv(r'country_df_top5.csv')
  top5 = country_df_top5['Country of asylum_applications'].tolist()
  return top5

# country of origin function: time series 

def originTimeSeries(country_df):
  country_df_yr = country_df.groupby(country_df['Year_applications']).sum().reset_index()
  fig = plt.figure()
  ax = fig.add_subplot(1, 1, 1)
  plot = ax.plot(country_df_yr['Year_applications'], country_df_yr['applied'])
  plot = ax.set_title('Applications by Year over Time')
  plot = ax.set_xlabel('year of application')
  return plot

# country of origin accepted function: map
def originmap(country_df):
      country_df = country_df.groupby(['Country of origin_applications','Country of origin (ISO)_applications','Country of asylum_applications','Country of asylum (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
      world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))
      country_df = world.set_index('iso_a3').join(country_df.set_index('Country of asylum (ISO)_applications'), lsuffix='_map', rsuffix='_data', how='left')
      country_df['total_accepted'] = country_df["Recognized decisions"] + country_df["Complementary protection"]
      country_df['ratio_accepted'] = (country_df["total_accepted"] / country_df["Total decisions"])
      from mpl_toolkits.axes_grid1 import make_axes_locatable
      fig, ax = plt.subplots(1, 1)
      divider = make_axes_locatable(ax)
      country = str(country_df['Country of origin (ISO)_applications'].iloc[0])
      title = "Total Accepted Refugees from Country of Interest, 2006-2019"
      ax.set(title=title)
      cax = divider.append_axes("bottom", size="5%", pad=0.1)
      plot1 = country_df.plot(column="total_accepted", ax=ax, legend=True, cax=cax, missing_kwds={'color': 'lightgrey'}, legend_kwds={'label': "total accepted refugees", 'orientation':"horizontal"})
      return plot1

# country of origin ratio functin: map
def originmapratio(country_df):
      country_df = country_df.groupby(['Country of origin_applications','Country of origin (ISO)_applications','Country of asylum_applications','Country of asylum (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
      world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))
      country_df = world.set_index('iso_a3').join(country_df.set_index('Country of asylum (ISO)_applications'), lsuffix='_map', rsuffix='_data', how='left')
      country_df['total_accepted'] = country_df["Recognized decisions"] + country_df["Complementary protection"]
      country_df['ratio_accepted'] = (country_df["total_accepted"] / country_df["Total decisions"])
      from mpl_toolkits.axes_grid1 import make_axes_locatable
      fig, ax = plt.subplots(1, 1)
      divider = make_axes_locatable(ax)
      ax.set(title='Percentage of Applications Accepted, 2006-2019')
      cax = divider.append_axes("bottom", size="5%", pad=0.1)
      plot2 = country_df.plot(column="ratio_accepted", ax=ax, legend=True, cax=cax, missing_kwds={'color': 'lightgrey'}, legend_kwds={'label': "percent of accepted refugees", 'orientation':"horizontal"})
      return plot2

# country of aslyum function: number of origin countries 

def numOriginCont(country_df): 
  n = len(country_df['Country of origin'].unique())
  return n

# country of aslyum function: percent world refugees 

def perWorldRefAsylum(country_df): 
  country_apps = country_df['applied'].sum()
  all_apps = df_asylum['applied'].sum()
  p = country_apps / all_apps
  return p*100

# country of aslyum function: top 5 countries of origin

def top5origin(country_df):
  country_df.groupby(['Country of origin_applications']).sum()  
  country_df_top = country_df.groupby(['Country of origin_applications','Country of origin (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
  country_df_top = country_df_top.sort_values('applied', ascending=False)
  country_df_top["total_accepted"] = country_df_top["Recognized decisions"] + country_df_top["Complementary protection"]
  country_df_top["total_rejected"] = country_df_top["Rejected decisions"] + country_df_top["Otherwise closed"]
  country_df_top["ratio_accepted"] = (country_df_top["total_accepted"] / country_df_top["Total decisions"])
  country_df_top5 = country_df_top.head(n = 5)
  country_df_top5.to_csv(r'country_df_top5.csv')
  top5 = country_df_top5['Country of origin_applications'].tolist()
  return top5

# country of aslyum function: time series

def asylumTimeSeries(country_df):
  country_df_yr = country_df.groupby(country_df['Year_applications']).sum().reset_index()
  fig = plt.figure()
  ax = fig.add_subplot(1, 1, 1)
  plot = ax.plot(country_df_yr['Year_applications'], country_df_yr['applied'])
  plot = ax.set_title('Applications by Year over Time')
  plot = ax.set_xlabel('year of application')
  return plot

# country of aslyum function: map 

def asylummap(country_df):
      country_df = country_df.groupby(['Country of asylum_applications','Country of asylum (ISO)_applications','Country of origin_applications','Country of origin (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
      world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))
      country_df = world.set_index('iso_a3').join(country_df.set_index('Country of origin (ISO)_applications'), lsuffix='_map', rsuffix='_data', how='left')
      country_df['total_accepted'] = country_df["Recognized decisions"] + country_df["Complementary protection"]
      country_df['ratio_accepted'] = (country_df["total_accepted"] / country_df["Total decisions"])
      from mpl_toolkits.axes_grid1 import make_axes_locatable
      fig, ax = plt.subplots(1, 1)
      divider = make_axes_locatable(ax)
      country = str(country_df['Country of asylum (ISO)_applications'].iloc[0])
      title = "Total Accepted Refugees by Country of Interest, 2006-2019"
      ax.set(title=title)
      cax = divider.append_axes("bottom", size="5%", pad=0.1)
      plot1 = country_df.plot(column="total_accepted", ax=ax, legend=True, cax=cax, missing_kwds={'color': 'lightgrey'}, legend_kwds={'label': "total accepted refugees", 'orientation':"horizontal"})
      return plot1

# country of aslyum ratio function: map 

def asylummapratio(country_df):
      country_df = country_df.groupby(['Country of asylum_applications','Country of asylum (ISO)_applications','Country of origin_applications','Country of origin (ISO)_applications'])['applied','Recognized decisions','Complementary protection','Rejected decisions','Otherwise closed', 'Total decisions'].sum().reset_index()
      world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))
      country_df = world.set_index('iso_a3').join(country_df.set_index('Country of origin (ISO)_applications'), lsuffix='_map', rsuffix='_data', how='left')
      country_df['total_accepted'] = country_df["Recognized decisions"] + country_df["Complementary protection"]
      country_df['ratio_accepted'] = (country_df["total_accepted"] / country_df["Total decisions"])
      from mpl_toolkits.axes_grid1 import make_axes_locatable
      fig, ax = plt.subplots(1, 1)
      divider = make_axes_locatable(ax)
      ax.set(title='Percentage of Applications Accepted by Country of Interest, 2006-2019')
      cax = divider.append_axes("bottom", size="5%", pad=0.1)
      plot2 = country_df.plot(column="ratio_accepted", ax=ax, legend=True, cax=cax, missing_kwds={'color': 'lightgrey'}, legend_kwds={'label': "percent of accepted refugees", 'orientation':"horizontal"})
      return plot2

def main():
    print('Welcome to our product!')
    print('This product is designed to provide information about refugees around the world.')

    # choose country of origin or asylum 
    type = input('Please enter origin or asylum to select the type of country you would like to learn more about: ')
    # print possible country codes based on type selection
    if type == 'origin':
      print('The top 10 country codes of world refugee countries of origin are: ')
      print(df_origin_top10['Country of origin (ISO)_applications'].tolist())
      print()
    else: 
      print('The top 10 country codes of world refugee countries of asylum are: ')
      print(df_asylum_top10['Country of asylum (ISO)_applications'].tolist())
      print()
    country = input('Please enter the three digit country code of the country you would like to learn more about: \n')
    print()
    # confirm selection 
    print('You selected ' + country + ' as the country of ' + type + '.\n')

    if type == 'origin': 
      country_df = df_joined.loc[df_joined['Country of origin (ISO)_applications'] == country]
      print('Refugees from {} sought asylum in {} different countries.\n'.format(country, numAsylumDest(country_df)))
      print('{} is responsible for {}% of applications submitted around the world.\n'.format(country, round(perWorldRef(country_df), 2)))
      print('The top 5 countries of asylum from ' + country + ' are:')
      print(top5asylum(country_df))
      print()
      print(originTimeSeries(country_df))
      print(originmap(country_df))
      print(originmapratio(country_df))
    else: 
      country_df = df_joined.loc[df_joined['Country of asylum (ISO)_applications'] == country]
      print('Refugees to {} originated from {} different countries.\n'.format(country, numOriginCont(country_df)))
      print('{} is reponsible for {}% of applications submitted around the world.\n'.format(country, round(perWorldRefAsylum(country_df), 2)))
      print('The top 5 countries of origin from ' + country + ' are:')
      print(top5origin(country_df))
      print()
      print(asylumTimeSeries(country_df))
      print(asylummap(country_df))
      print(asylummapratio(country_df))

if __name__ == "__main__":
    main()

"""UNIT TESTING"""

import unittest

class refugeeProgramTests(unittest.TestCase):
  def test_origin_vs_asylum(self):
    type = 'origin'
    type2 = 'asylum'

    self.assertEqual(type, 'origin')
    self.assertEqual(type2, 'asylum')

  def test_country_selection(self):
    country = 'DEU'
    country2 = 'VEN'

    self.assertEqual(country, 'DEU')
    self.assertEqual(country2, 'VEN')

if __name__ == '__main__':
  #unittest.main()
  unittest.main(argv=[''],exit=False)